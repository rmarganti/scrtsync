name: Build and Publish
on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g., v1.2.3)"
        required: true

env:
  BIN_NAME: scrtsync
  PROJECT_NAME: secret-sync
  REPO_NAME: rmarganti/scrtsync
  BREW_TAP: rmarganti/homebrew-tap

jobs:
  dist:
    name: Dist
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # don't fail other jobs if one fails
      matrix:
        build: [x86_64-linux, aarch64-linux, x86_64-macos] #x86_64-windows, x86_64-win-gnu, win32-msvc
        include:
          - build: x86_64-linux
            os: ubuntu-20.04
            rust: stable
            target: x86_64-unknown-linux-gnu
            cross: false
          - build: aarch64-linux
            os: ubuntu-20.04
            rust: stable
            target: aarch64-unknown-linux-gnu
            cross: true
          - build: x86_64-macos
            os: macos-latest
            rust: stable
            target: x86_64-apple-darwin
            cross: false
          # - build: x86_64-windows
          #   os: windows-2019
          #   rust: stable
          #   target: x86_64-pc-windows-msvc
          #   cross: false
          # - build: aarch64-macos
          #   os: macos-latest
          #   rust: stable
          #   target: aarch64-apple-darwin
          # - build: x86_64-win-gnu
          #   os: windows-2019
          #   rust: stable-x86_64-gnu
          #   target: x86_64-pc-windows-gnu
          # - build: win32-msvc
          #   os: windows-2019
          #   rust: stable
          #   target: i686-pc-windows-msvc

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install ${{ matrix.rust }} toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          override: true

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.cross }}
          command: test
          args: --release --locked --target ${{ matrix.target }}

      - name: Build release binary
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.cross }}
          command: build
          args: --release --locked --target ${{ matrix.target }}

      - name: Strip release binary (linux and macos)
        if: matrix.build == 'x86_64-linux' || matrix.build == 'x86_64-macos'
        run: strip "target/${{ matrix.target }}/release/$BIN_NAME"

      - name: Strip release binary (arm)
        if: matrix.build == 'aarch64-linux'
        run: |
          docker run --rm -v \
            "$PWD/target:/target:Z" \
            rustembedded/cross:${{ matrix.target }} \
            aarch64-linux-gnu-strip \
            /target/${{ matrix.target }}/release/$BIN_NAME

      - name: Build archive
        shell: bash
        run: |
          mkdir dist
          if [ "${{ matrix.os }}" = "windows-2019" ]; then
            cp "target/${{ matrix.target }}/release/$BIN_NAME.exe" "dist/"
          else
            cp "target/${{ matrix.target }}/release/$BIN_NAME" "dist/"
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: bins-${{ matrix.build }}
          path: dist

  publish:
    name: Publish
    needs: [dist]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: false

      - uses: actions/download-artifact@v4.1.7
      - run: ls -al bins-*

      # Extract the tag name for both release and manual triggers.
      # For manual triggers, validate that the input starts with 'v' (e.g., v1.2.3).
      - name: Extract version
        id: extract-version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ ! "${{ github.event.inputs.version }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "Error: version input must start with 'v' and follow semantic versioning (e.g., v1.2.3)"
              exit 1
            fi
            echo "tag-name=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
            echo TAG=${{ github.event.inputs.version }} >> $GITHUB_ENV
          else
            # Remove refs/tags/ prefix to get the tag name
            echo "tag-name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
            echo TAG=${GITHUB_REF#refs/tags/} >> $GITHUB_ENV
          fi

      - name: Build archive
        shell: bash
        run: |
          set -ex

          rm -rf tmp
          mkdir tmp
          mkdir dist

          for dir in bins-* ; do
              platform=${dir#"bins-"}
              unset exe
              if [[ $platform =~ "windows" ]]; then
                  exe=".exe"
              fi
              pkgname=$PROJECT_NAME-$TAG-$platform
              mkdir tmp/$pkgname
              # cp LICENSE README.md tmp/$pkgname
              mv bins-$platform/$BIN_NAME$exe tmp/$pkgname
              chmod +x tmp/$pkgname/$BIN_NAME$exe

              if [ "$exe" = "" ]; then
                  tar cJf dist/$pkgname.tar.xz -C tmp $pkgname
              else
                  (cd tmp && 7z a -r ../dist/$pkgname.zip $pkgname)
              fi
          done

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.COMMITTER_TOKEN }}
          file: dist/*
          file_glob: true
          tag: ${{ steps.extract-version.outputs.tag-name }}
          overwrite: true

      - uses: mislav/bump-homebrew-formula-action@v3
        with:
          formula-path: ${{env.PROJECT_NAME}}.rb
          homebrew-tap: ${{ env.BREW_TAP }}
          download-url: "https://github.com/${{ env.REPO_NAME }}/releases/download/${{ steps.extract-version.outputs.tag-name }}/${{env.PROJECT_NAME}}-${{ steps.extract-version.outputs.tag-name }}-x86_64-macos.tar.xz"
          commit-message: updating formula for ${{ env.PROJECT_NAME }}
        env:
          COMMITTER_TOKEN: ${{ secrets.COMMITTER_TOKEN }}

      # Uncomment this section if you want to release your package to crates.io
      # Before publishing, make sure you have filled out the following fields:
      # license or license-file, description, homepage, documentation, repository, readme.
      # Read more: https://doc.rust-lang.org/cargo/reference/publishing.html

      # - name: Install ${{ matrix.rust }} toolchain
      #   uses: actions-rs/toolchain@v1
      #   with:
      #     profile: minimal
      #     toolchain: ${{ matrix.rust }}
      #     target: ${{ matrix.target }}
      # - run: cargo publish --token ${CRATES_TOKEN}
      #  env:
      #    CRATES_TOKEN: ${{ secrets.CRATES_TOKEN }}
